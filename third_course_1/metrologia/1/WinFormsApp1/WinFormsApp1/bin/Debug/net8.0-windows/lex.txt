%{
#include <stdio.h>
%}

%option noyywrap
%x COMMENT

%%

\/\/[^\n]*               { /* Игнорирование однострочных комментариев */ }
\/\*                     { BEGIN(COMMENT); }  
<COMMENT>\*\/            { BEGIN(INITIAL); }
<COMMENT>.|\n            { /* Игнорирование многострочных комментариев */ }

[\n\t {}:.]+               { /* Игнорирование пробелов и новых строк */ }

"using".*                { /* Игнорирование директив using */ }
"namespace".*            { printf("Operator: %s\n", yytext); }
"static"|"void"|"public"|"private"|"protected"|"class" { /* Игнорирование ключевых слов доступа и модификаторов */ }

"#"([a-zA-Z_][a-zA-Z_0-9]*)    { /* Игнорирование директив препроцессора */ }

"\["([^]]*)"\]"               { /* Игнорирование атрибутов */ }
\"([^\\\"]|\\.)*\"                   { printf("Operand: %s\n", yytext); } // Строки в двойных кавычках
"+"|"-"|"*"|"/"|"%"|"++"|"--"        { printf("Operator: %s\n", yytext); }
"<"|">"|"<="|">="|"=="|"!="          { printf("Operator: %s\n", yytext); }
"&&"|"||"|"!"                        { printf("Operator: %s\n", yytext); }
"="|"+="|"-="|"*="|"/="|"%="         { printf("Operator: %s\n", yytext); }
";"|"\."                            { printf("Operator: %s\n", yytext); }
"("                              { printf("Operator: ()\n"); }
")"                              { /*игнорировать*/ }
"["                              { printf("Operator: [\n"); }
"]"                              { /*игнорировать*/ }

"if"|"switch"|"while"|"for"|"do"|"break"|"continue"|"try"|"throw"|"return"|"yield"|"await"|"async"|"new"  { printf("Operator: %s\n", yytext); }
"else"|"default"|"catch"|"finally"|"case"                   { /* Игнорирование вторых частей конструкций */ }

[0-9]+(\.[0-9]+)?                    { printf("Operand: %s\n", yytext); }
"\'([^\\\']|\\.)\'"                  { printf("Operand: %s\n", yytext); }


([a-zA-Z_][a-zA-Z_0-9]*)\[\]         { /* Игнорирование типов массивов */ }

"int"|"float"|"double"|"bool"|"char"|"string"|"object"|"Exception"   { /* Игнорирование типов данных */ }
([a-zA-Z_][a-zA-Z_0-9]*\.)*([a-zA-Z_][a-zA-Z_0-9]*)\(([^)]*)\) { printf("Operator: %s\n", yytext); }

[a-zA-Z_][a-zA-Z_0-9]*               { printf("Operand: %s\n", yytext); }

%%

int main()
{
    yylex();
    return 0;
}